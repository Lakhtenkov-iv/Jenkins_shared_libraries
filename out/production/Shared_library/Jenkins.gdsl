def ctx = context(scope: scriptScope())
contributor(ctx) {
    method(name: 'ansiColor', type: 'Object', params: [colorMapName:java.lang.String, body:'Closure'], doc: 'Color ANSI Console Output')
    method(name: 'awaitDeploymentCompletion', type: 'Object', params: [deploymentId:'java.lang.String'], doc: 'Wait for AWS CodeDeploy deployment completion')
    method(name: 'awsIdentity', type: 'Object', params: [:], doc: 'Print and return the AWS identity')
    method(name: 'bitbucketStatusNotify', type: 'Object', params: [buildState:'java.lang.String'], doc: 'Notify a build status to BitBucket.')
    method(name: 'bitbucketStatusNotify', type: 'Object', namedParams: [parameter(name: 'buildState', type: 'java.lang.String'), parameter(name: 'buildDescription', type: 'java.lang.String'), parameter(name: 'buildKey', type: 'java.lang.String'), parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'credentialsId', type: 'java.lang.String'), ], doc: 'Notify a build status to BitBucket.')
    method(name: 'build', type: 'Object', params: [job:'java.lang.String'], doc: 'Build a job')
    method(name: 'build', type: 'Object', namedParams: [parameter(name: 'job', type: 'java.lang.String'), parameter(name: 'parameters', type: 'Map'), parameter(name: 'propagate', type: 'boolean'), parameter(name: 'quietPeriod', type: 'java.lang.Integer'), parameter(name: 'wait', type: 'boolean'), ], doc: 'Build a job')
    method(name: 'cfInvalidate', type: 'Object', namedParams: [parameter(name: 'distribution', type: 'java.lang.String'), parameter(name: 'paths', type: 'Map'), ], doc: 'Invalidate given paths in CloudFront distribution')
    method(name: 'cfnDelete', type: 'Object', params: [stack:'java.lang.String'], doc: 'Delete CloudFormation stack')
    method(name: 'cfnDelete', type: 'Object', namedParams: [parameter(name: 'stack', type: 'java.lang.String'), parameter(name: 'pollInterval', type: 'long'), ], doc: 'Delete CloudFormation stack')
    method(name: 'cfnDeleteStackSet', type: 'Object', params: [stackSet:'java.lang.String'], doc: 'Delete CloudFormation Stack Set')
    method(name: 'cfnDeleteStackSet', type: 'Object', namedParams: [parameter(name: 'stackSet', type: 'java.lang.String'), parameter(name: 'pollInterval', type: 'java.lang.Long'), ], doc: 'Delete CloudFormation Stack Set')
    method(name: 'cfnDescribe', type: 'Object', params: [stack:'java.lang.String'], doc: 'Describe outputs of CloudFormation stack')
    method(name: 'cfnExecuteChangeSet', type: 'Object', namedParams: [parameter(name: 'changeSet', type: 'java.lang.String'), parameter(name: 'stack', type: 'java.lang.String'), parameter(name: 'pollInterval', type: 'java.lang.Long'), ], doc: 'Execute CloudFormation change set')
    method(name: 'cfnExports', type: 'Object', params: [:], doc: 'Describe CloudFormation global exports')
    method(name: 'cfnUpdateStackSet', type: 'Object', params: [stackSet:'java.lang.String'], doc: 'Create or Update CloudFormation Stack Set')
    method(name: 'cfnUpdateStackSet', type: 'Object', namedParams: [parameter(name: 'stackSet', type: 'java.lang.String'), parameter(name: 'create', type: 'java.lang.Boolean'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'keepParams', type: 'Map'), parameter(name: 'onFailure', type: 'java.lang.String'), parameter(name: 'params', type: 'Map'), parameter(name: 'paramsFile', type: 'java.lang.String'), parameter(name: 'pollInterval', type: 'java.lang.Long'), parameter(name: 'tags', type: 'Map'), parameter(name: 'url', type: 'java.lang.String'), ], doc: 'Create or Update CloudFormation Stack Set')
    method(name: 'deployAPI', type: 'Object', namedParams: [parameter(name: 'api', type: 'java.lang.String'), parameter(name: 'stage', type: 'java.lang.String'), parameter(name: 'description', type: 'java.lang.String'), parameter(name: 'variables', type: 'Map'), ], doc: 'Deploy the given API Gateway API')
    method(name: 'dockerNode', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'dockerHost', type: 'java.lang.String'), parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'remoteFs', type: 'java.lang.String'), parameter(name: 'credentialsId', type: 'java.lang.String'), ], doc: 'Docker Node (\u26A0\uFE0F Experimental)')
    method(name: 'echo', type: 'Object', params: [message:'java.lang.String'], doc: 'Print Message')
    method(name: 'ecrLogin', type: 'Object', params: [:], doc: 'Create and return the ECR login string')
    method(name: 'ecrLogin', type: 'Object', namedParams: [parameter(name: 'email', type: 'java.lang.Boolean'), ], doc: 'Create and return the ECR login string')
    method(name: 'emailext', type: 'Object', namedParams: [parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), parameter(name: 'attachLog', type: 'boolean'), parameter(name: 'attachmentsPattern', type: 'java.lang.String'), parameter(name: 'compressLog', type: 'boolean'), parameter(name: 'from', type: 'java.lang.String'), parameter(name: 'mimeType', type: 'java.lang.String'), parameter(name: 'postsendScript', type: 'java.lang.String'), parameter(name: 'presendScript', type: 'java.lang.String'), parameter(name: 'recipientProviders', type: 'Map'), parameter(name: 'replyTo', type: 'java.lang.String'), parameter(name: 'to', type: 'java.lang.String'), ], doc: 'Extended Email')
    method(name: 'emailextrecipients', type: 'Object', params: [recipientProviders:'Map'], doc: 'Extended Email Recipients')
    method(name: 'error', type: 'Object', params: [message:'java.lang.String'], doc: 'Error signal')
    method(name: 'httpRequest', type: 'Object', params: [url:'java.lang.String'], doc: 'Perform an HTTP Request and return a response object')
    method(name: 'httpRequest', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'acceptType', type: 'Map'), parameter(name: 'authentication', type: 'java.lang.String'), parameter(name: 'consoleLogResponseBody', type: 'java.lang.Boolean'), parameter(name: 'contentType', type: 'Map'), parameter(name: 'customHeaders', type: 'Map'), parameter(name: 'httpMode', type: 'Map'), parameter(name: 'httpProxy', type: 'java.lang.String'), parameter(name: 'ignoreSslErrors', type: 'boolean'), parameter(name: 'outputFile', type: 'java.lang.String'), parameter(name: 'quiet', type: 'java.lang.Boolean'), parameter(name: 'requestBody', type: 'java.lang.String'), parameter(name: 'responseHandle', type: 'Map'), parameter(name: 'timeout', type: 'java.lang.Integer'), parameter(name: 'validResponseCodes', type: 'java.lang.String'), parameter(name: 'validResponseContent', type: 'java.lang.String'), ], doc: 'Perform an HTTP Request and return a response object')
    method(name: 'hub_scan_failure', type: 'Object', namedParams: [parameter(name: 'failBuildForPolicyViolations', type: 'java.lang.Boolean'), parameter(name: 'buildStateOnFailure', type: 'java.lang.String'), ], doc: 'Black Duck Hub Failure Conditions (Hub 3.0+)')
    method(name: 'input', type: 'Object', params: [message:'java.lang.String'], doc: 'Wait for interactive input')
    method(name: 'input', type: 'Object', namedParams: [parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'ok', type: 'java.lang.String'), parameter(name: 'parameters', type: 'Map'), parameter(name: 'submitter', type: 'java.lang.String'), parameter(name: 'submitterParameter', type: 'java.lang.String'), ], doc: 'Wait for interactive input')
    method(name: 'invokeLambda', type: 'Object', params: [functionName:'java.lang.String'], doc: 'Invoke a given Lambda function')
    method(name: 'invokeLambda', type: 'Object', namedParams: [parameter(name: 'functionName', type: 'java.lang.String'), parameter(name: 'payload', type: 'java.lang.Object'), parameter(name: 'payloadAsString', type: 'java.lang.String'), parameter(name: 'returnValueAsString', type: 'boolean'), ], doc: 'Invoke a given Lambda function')
    method(name: 'isUnix', type: 'Object', params: [:], doc: 'Checks if running on a Unix-like node')
    method(name: 'jiraComment', type: 'Object', namedParams: [parameter(name: 'issueKey', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), ], doc: 'JIRA: Add a comment to issue(s)')
    method(name: 'jiraIssueSelector', type: 'Object', params: [:], doc: 'JIRA: Issue selector')
    method(name: 'jiraIssueSelector', type: 'Object', namedParams: [parameter(name: 'issueSelector', type: 'Map'), ], doc: 'JIRA: Issue selector')
    method(name: 'jiraSearch', type: 'Object', params: [jql:'java.lang.String'], doc: 'JIRA: Search issues')
    method(name: 'library', type: 'Object', params: [identifier:'java.lang.String'], doc: 'Load a shared library on the fly')
    method(name: 'library', type: 'Object', namedParams: [parameter(name: 'identifier', type: 'java.lang.String'), parameter(name: 'changelog', type: 'java.lang.Boolean'), parameter(name: 'retriever', type: 'Map'), ], doc: 'Load a shared library on the fly')
    method(name: 'libraryResource', type: 'Object', params: [resource:'java.lang.String'], doc: 'Load a resource file from a shared library')
    method(name: 'listAWSAccounts', type: 'Object', params: [:], doc: 'List all AWS accounts of the organization')
    method(name: 'mail', type: 'Object', namedParams: [parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), parameter(name: 'bcc', type: 'java.lang.String'), parameter(name: 'cc', type: 'java.lang.String'), parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'from', type: 'java.lang.String'), parameter(name: 'mimeType', type: 'java.lang.String'), parameter(name: 'replyTo', type: 'java.lang.String'), parameter(name: 'to', type: 'java.lang.String'), ], doc: 'Mail')
    method(name: 'milestone', type: 'Object', params: [ordinal:'java.lang.Integer'], doc: 'The milestone step forces all builds to go through in order')
    method(name: 'milestone', type: 'Object', namedParams: [parameter(name: 'ordinal', type: 'java.lang.Integer'), parameter(name: 'label', type: 'java.lang.String'), ], doc: 'The milestone step forces all builds to go through in order')
    method(name: 'node', type: 'Object', params: [label:java.lang.String, body:'Closure'], doc: 'Allocate node')
    method(name: 'nodesByLabel', type: 'Object', params: [label:'java.lang.String'], doc: 'List of nodes by Label, by default excludes offline nodes.')
    method(name: 'nodesByLabel', type: 'Object', namedParams: [parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'offline', type: 'boolean'), ], doc: 'List of nodes by Label, by default excludes offline nodes.')
    method(name: 'properties', type: 'Object', params: [properties:'Map'], doc: 'Set job properties')
    method(name: 'readJSON', type: 'Object', params: [:], doc: 'Read JSON from files in the workspace.')
    method(name: 'readJSON', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read JSON from files in the workspace.')
    method(name: 'readManifest', type: 'Object', params: [:], doc: 'Read a Jar Manifest')
    method(name: 'readManifest', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read a Jar Manifest')
    method(name: 'readProperties', type: 'Object', params: [:], doc: 'Read properties from files in the workspace or text.')
    method(name: 'readProperties', type: 'Object', namedParams: [parameter(name: 'defaults', type: 'java.util.Map'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'interpolate', type: 'java.lang.Boolean'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read properties from files in the workspace or text.')
    method(name: 'readTrusted', type: 'Object', params: [path:'java.lang.String'], doc: 'Read trusted file from SCM')
    method(name: 'readYaml', type: 'Object', params: [:], doc: 'Read yaml from files in the workspace or text.')
    method(name: 'readYaml', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read yaml from files in the workspace or text.')
    method(name: 'release', type: 'Object', params: [job:'java.lang.String'], doc: 'Trigger release for the job')
    method(name: 'release', type: 'Object', namedParams: [parameter(name: 'job', type: 'java.lang.String'), parameter(name: 'parameters', type: 'Map'), ], doc: 'Trigger release for the job')
    method(name: 'resolveScm', type: 'Object', namedParams: [parameter(name: 'source', type: 'Map'), parameter(name: 'targets', type: 'Map'), parameter(name: 'ignoreErrors', type: 'boolean'), ], doc: 'Resolves an SCM from an SCM Source and a list of candidate target branch names')
    method(name: 'retry', type: 'Object', params: [count:int, body:'Closure'], doc: 'Retry the body up to N times')
    method(name: 's3Delete', type: 'Object', namedParams: [parameter(name: 'bucket', type: 'java.lang.String'), parameter(name: 'path', type: 'java.lang.String'), parameter(name: 'pathStyleAccessEnabled', type: 'boolean'), parameter(name: 'payloadSigningEnabled', type: 'boolean'), ], doc: 'Delete file from S3')
    method(name: 'script', type: 'Object', params: [body:'Closure'], doc: 'Run arbitrary Pipeline script')
    method(name: 'setAccountAlias', type: 'Object', params: [name:'java.lang.String'], doc: 'Set the AWS account alias')
    method(name: 'sleep', type: 'Object', params: [time:'int'], doc: 'Sleep')
    method(name: 'sleep', type: 'Object', namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'), ], doc: 'Sleep')
    method(name: 'snsPublish', type: 'Object', namedParams: [parameter(name: 'topicArn', type: 'java.lang.String'), parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'message', type: 'java.lang.String'), ], doc: 'Publish notification to SNS')
    method(name: 'stage', type: 'Object', params: [name:java.lang.String, body:'Closure'], doc: 'Stage')
    method(name: 'stage', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'concurrency', type: 'java.lang.Integer'), ], doc: 'Stage')
    method(name: 'timeout', type: 'Object', params: [time:int, body:'Closure'], doc: 'Enforce time limit')
    method(name: 'timeout', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'), ], doc: 'Enforce time limit')
    method(name: 'timestamps', type: 'Object', params: [body:'Closure'], doc: 'Timestamps')
    method(name: 'tool', type: 'Object', params: [name:'java.lang.String'], doc: 'Use a tool from a predefined Tool Installation')
    method(name: 'tool', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'type', type: 'java.lang.String'), ], doc: 'Use a tool from a predefined Tool Installation')
    method(name: 'waitForQualityGate', type: 'Object', params: [:], doc: 'Wait for SonarQube analysis to be completed and return quality gate status')
    method(name: 'waitUntil', type: 'Object', params: [body:'Closure'], doc: 'Wait for condition')
    method(name: 'withAWS', type: 'Object', params: [body:'Closure'], doc: 'set AWS settings for nested block')
    method(name: 'withAWS', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'credentials', type: 'java.lang.String'), parameter(name: 'endpointUrl', type: 'java.lang.String'), parameter(name: 'externalId', type: 'java.lang.String'), parameter(name: 'federatedUserId', type: 'java.lang.String'), parameter(name: 'policy', type: 'java.lang.String'), parameter(name: 'profile', type: 'java.lang.String'), parameter(name: 'region', type: 'java.lang.String'), parameter(name: 'role', type: 'java.lang.String'), parameter(name: 'roleAccount', type: 'java.lang.String'), ], doc: 'set AWS settings for nested block')
    method(name: 'withCredentials', type: 'Object', params: [bindings:Map, body:'Closure'], doc: 'Bind credentials to variables')
    method(name: 'withEnv', type: 'Object', params: [overrides:Map, body:'Closure'], doc: 'Set environment variables')
    method(name: 'ws', type: 'Object', params: [dir:java.lang.String, body:'Closure'], doc: 'Allocate workspace')
    method(name: 'AddInteractivePromotion', type: 'Object', namedParams: [parameter(name: 'promotionConfig', type: 'Map'), parameter(name: 'server', type: 'Map'), parameter(name: 'displayName', type: 'java.lang.String'), ], doc: 'Add Interactive promotion')
    method(name: 'artifactoryDistributeBuild', type: 'Object', namedParams: [parameter(name: 'distributionConfig', type: 'Map'), parameter(name: 'server', type: 'Map'), ], doc: 'Distribute build')
    method(name: 'artifactoryPromoteBuild', type: 'Object', namedParams: [parameter(name: 'promotionConfig', type: 'Map'), parameter(name: 'server', type: 'Map'), ], doc: 'Promote build')
    method(name: 'catchError', type: 'Object', params: [body:'Closure'], doc: 'Advanced/Deprecated Catch error and set build result')
    method(name: 'collectEnv', type: 'Object', params: [env:'Map'], doc: 'Advanced/Deprecated Collect environment variables and system properties')
    method(name: 'dockerFingerprintRun', type: 'Object', params: [containerId:'java.lang.String'], doc: 'Advanced/Deprecated Record trace of a Docker image run in a container')
    method(name: 'dockerFingerprintRun', type: 'Object', namedParams: [parameter(name: 'containerId', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Record trace of a Docker image run in a container')
    method(name: 'envVarsForTool', type: 'Object', namedParams: [parameter(name: 'toolId', type: 'java.lang.String'), parameter(name: 'toolVersion', type: 'java.lang.String'), ], doc: 'Fetches the environment variables for a given tool in a list of \'FOO=bar\' strings suitable for the withEnv step.')
    method(name: 'getArtifactoryServer', type: 'Object', params: [artifactoryServerID:'java.lang.String'], doc: 'Advanced/Deprecated Get Artifactory server from Jenkins config')
    method(name: 'getContext', type: 'Object', params: [type:'Map'], doc: 'Advanced/Deprecated Get contextual object from internal APIs')
    method(name: 'newBuildInfo', type: 'Object', params: [:], doc: 'Advanced/Deprecated New buildInfo')
    method(name: 'newGradleBuild', type: 'Object', params: [:], doc: 'Advanced/Deprecated New Artifactory gradle executor')
    method(name: 'newMavenBuild', type: 'Object', params: [:], doc: 'Advanced/Deprecated New Artifactory maven')
    method(name: 'withContext', type: 'Object', params: [context:java.lang.Object, body:'Closure'], doc: 'Advanced/Deprecated Use contextual object from internal APIs within a block')
    method(name: 'xrayScanBuild', type: 'Object', namedParams: [parameter(name: 'xrayScanConfig', type: 'Map'), parameter(name: 'server', type: 'Map'), ], doc: 'Xray build scanning')
    property(name: 'docker', type: 'org.jenkinsci.plugins.docker.workflow.DockerDSL')
    property(name: 'pipeline', type: 'org.jenkinsci.plugins.pipeline.modeldefinition.ModelStepLoader')
    property(name: 'env', type: 'org.jenkinsci.plugins.workflow.cps.EnvActionImpl.Binder')
    property(name: 'params', type: 'org.jenkinsci.plugins.workflow.cps.ParamsVariable')
    property(name: 'currentBuild', type: 'org.jenkinsci.plugins.workflow.cps.RunWrapperBinder')
    property(name: 'scm', type: 'org.jenkinsci.plugins.workflow.multibranch.SCMVar')
    property(name: 'Artifactory', type: 'org.jfrog.hudson.pipeline.dsl.ArtifactoryDSL')
}
//Steps that require a node context
def nodeCtx = context(scope: closureScope())
contributor(nodeCtx) {
    def call = enclosingCall('node')
    if (call) {
        method(name: 'appMonPublishTestResults', type: 'Object', params: [:], doc: 'Dynatrace AppMon - Finish Registered Tests Runs and Publish Results')
        method(name: 'appMonPublishTestResults', type: 'Object', namedParams: [parameter(name: 'printXmlReportForDebug', type: 'java.lang.Boolean'), parameter(name: 'statusNameIfDegraded', type: 'java.lang.String'), parameter(name: 'statusNameIfVolatile', type: 'java.lang.String'), ], doc: 'Dynatrace AppMon - Finish Registered Tests Runs and Publish Results')
        method(name: 'appMonRegisterTestRun', type: 'Object', params: [category:'java.lang.String'], doc: 'Dynatrace AppMon - Register Test Run')
        method(name: 'appMonRegisterTestRun', type: 'Object', namedParams: [parameter(name: 'category', type: 'java.lang.String'), parameter(name: 'platform', type: 'java.lang.String'), ], doc: 'Dynatrace AppMon - Register Test Run')
        method(name: 'bat', type: 'Object', params: [script:'java.lang.String'], doc: 'Windows Batch Script')
        method(name: 'bat', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'Windows Batch Script')
        method(name: 'cfnCreateChangeSet', type: 'Object', namedParams: [parameter(name: 'changeSet', type: 'java.lang.String'), parameter(name: 'stack', type: 'java.lang.String'), parameter(name: 'create', type: 'java.lang.Boolean'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'keepParams', type: 'Map'), parameter(name: 'onFailure', type: 'java.lang.String'), parameter(name: 'params', type: 'Map'), parameter(name: 'paramsFile', type: 'java.lang.String'), parameter(name: 'pollInterval', type: 'java.lang.Long'), parameter(name: 'roleArn', type: 'java.lang.String'), parameter(name: 'tags', type: 'Map'), parameter(name: 'url', type: 'java.lang.String'), ], doc: 'Create CloudFormation change set')
        method(name: 'cfnUpdate', type: 'Object', params: [stack:'java.lang.String'], doc: 'Create or Update CloudFormation stack')
        method(name: 'cfnUpdate', type: 'Object', namedParams: [parameter(name: 'stack', type: 'java.lang.String'), parameter(name: 'create', type: 'java.lang.Boolean'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'keepParams', type: 'Map'), parameter(name: 'onFailure', type: 'java.lang.String'), parameter(name: 'params', type: 'Map'), parameter(name: 'paramsFile', type: 'java.lang.String'), parameter(name: 'pollInterval', type: 'java.lang.Long'), parameter(name: 'roleArn', type: 'java.lang.String'), parameter(name: 'tags', type: 'Map'), parameter(name: 'timeoutInMinutes', type: 'java.lang.Integer'), parameter(name: 'url', type: 'java.lang.String'), ], doc: 'Create or Update CloudFormation stack')
        method(name: 'cfnValidate', type: 'Object', params: [:], doc: 'Validate CloudFormation template')
        method(name: 'cfnValidate', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'url', type: 'java.lang.String'), ], doc: 'Validate CloudFormation template')
        method(name: 'checkout', type: 'Object', params: [scm:'Map'], doc: 'General SCM')
        method(name: 'checkout', type: 'Object', namedParams: [parameter(name: 'scm', type: 'Map'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'poll', type: 'boolean'), ], doc: 'General SCM')
        method(name: 'deleteDir', type: 'Object', params: [:], doc: 'Recursively delete the current directory from the workspace')
        method(name: 'dir', type: 'Object', params: [path:java.lang.String, body:'Closure'], doc: 'Change current directory')
        method(name: 'fileExists', type: 'Object', params: [file:'java.lang.String'], doc: 'Verify if file exists in workspace')
        method(name: 'findFiles', type: 'Object', params: [:], doc: 'Find files in the workspace')
        method(name: 'findFiles', type: 'Object', namedParams: [parameter(name: 'glob', type: 'java.lang.String'), ], doc: 'Find files in the workspace')
        method(name: 'git', type: 'Object', params: [url:'java.lang.String'], doc: 'Git')
        method(name: 'git', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'branch', type: 'java.lang.String'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'poll', type: 'boolean'), ], doc: 'Git')
        method(name: 'hub_scan', type: 'Object', namedParams: [parameter(name: 'scans', type: 'Map'), parameter(name: 'hubProjectName', type: 'java.lang.String'), parameter(name: 'hubProjectVersion', type: 'java.lang.String'), parameter(name: 'hubVersionPhase', type: 'java.lang.String'), parameter(name: 'hubVersionDist', type: 'java.lang.String'), parameter(name: 'scanMemory', type: 'java.lang.String'), parameter(name: 'shouldGenerateHubReport', type: 'boolean'), parameter(name: 'projectLevelAdjustments', type: 'boolean'), parameter(name: 'bomUpdateMaximumWaitTime', type: 'java.lang.String'), parameter(name: 'dryRun', type: 'boolean'), parameter(name: 'cleanupOnSuccessfulScan', type: 'boolean'), parameter(name: 'excludePatterns', type: 'Map'), parameter(name: 'codeLocationName', type: 'java.lang.String'), parameter(name: 'unmapPreviousCodeLocations', type: 'boolean'), parameter(name: 'deletePreviousCodeLocations', type: 'boolean'), ], doc: 'Black Duck Hub Integration')
        method(name: 'junit', type: 'Object', params: [testResults:'java.lang.String'], doc: 'Archive JUnit-formatted test results')
        method(name: 'junit', type: 'Object', namedParams: [parameter(name: 'testResults', type: 'java.lang.String'), parameter(name: 'allowEmptyResults', type: 'boolean'), parameter(name: 'healthScaleFactor', type: 'double'), parameter(name: 'keepLongStdio', type: 'boolean'), parameter(name: 'testDataPublishers', type: 'Map'), ], doc: 'Archive JUnit-formatted test results')
        method(name: 'load', type: 'Object', params: [path:'java.lang.String'], doc: 'Evaluate a Groovy source file into the Pipeline script')
        method(name: 'powershell', type: 'Object', params: [script:'java.lang.String'], doc: 'PowerShell Script')
        method(name: 'powershell', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'PowerShell Script')
        method(name: 'publishHTML', type: 'Object', params: [target:'Map'], doc: 'Publish HTML reports')
        method(name: 'pwd', type: 'Object', params: [:], doc: 'Determine current directory')
        method(name: 'pwd', type: 'Object', namedParams: [parameter(name: 'tmp', type: 'boolean'), ], doc: 'Determine current directory')
        method(name: 'readFile', type: 'Object', params: [file:'java.lang.String'], doc: 'Read file from workspace')
        method(name: 'readFile', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Read file from workspace')
        method(name: 'readMavenPom', type: 'Object', params: [:], doc: 'Read a maven project file.')
        method(name: 'readMavenPom', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), ], doc: 'Read a maven project file.')
        method(name: 's3Download', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'bucket', type: 'java.lang.String'), parameter(name: 'pathStyleAccessEnabled', type: 'boolean'), parameter(name: 'payloadSigningEnabled', type: 'boolean'), parameter(name: 'force', type: 'boolean'), parameter(name: 'path', type: 'java.lang.String'), ], doc: 'Copy file from S3')
        method(name: 's3FindFiles', type: 'Object', params: [bucket:'java.lang.String'], doc: 'Find files in S3')
        method(name: 's3FindFiles', type: 'Object', namedParams: [parameter(name: 'bucket', type: 'java.lang.String'), parameter(name: 'pathStyleAccessEnabled', type: 'boolean'), parameter(name: 'payloadSigningEnabled', type: 'boolean'), parameter(name: 'glob', type: 'java.lang.String'), parameter(name: 'onlyFiles', type: 'boolean'), parameter(name: 'path', type: 'java.lang.String'), ], doc: 'Find files in S3')
        method(name: 's3Upload', type: 'Object', params: [bucket:'java.lang.String'], doc: 'Copy file to S3')
        method(name: 's3Upload', type: 'Object', namedParams: [parameter(name: 'bucket', type: 'java.lang.String'), parameter(name: 'pathStyleAccessEnabled', type: 'boolean'), parameter(name: 'payloadSigningEnabled', type: 'boolean'), parameter(name: 'acl', type: 'Map'), parameter(name: 'cacheControl', type: 'java.lang.String'), parameter(name: 'contentType', type: 'java.lang.String'), parameter(name: 'excludePathPattern', type: 'java.lang.String'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'includePathPattern', type: 'java.lang.String'), parameter(name: 'kmsId', type: 'java.lang.String'), parameter(name: 'metadatas', type: 'Map'), parameter(name: 'path', type: 'java.lang.String'), parameter(name: 'workingDir', type: 'java.lang.String'), ], doc: 'Copy file to S3')
        method(name: 'sh', type: 'Object', params: [script:'java.lang.String'], doc: 'Shell Script')
        method(name: 'sh', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'Shell Script')
        method(name: 'sha1', type: 'Object', params: [file:'java.lang.String'], doc: 'Compute the SHA1 of a given file')
        method(name: 'sshagent', type: 'Object', params: [credentials:Map, body:'Closure'], doc: 'SSH Agent')
        method(name: 'sshagent', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'credentials', type: 'Map'), parameter(name: 'ignoreMissing', type: 'boolean'), ], doc: 'SSH Agent')
        method(name: 'stash', type: 'Object', params: [name:'java.lang.String'], doc: 'Stash some files to be used later in the build')
        method(name: 'stash', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'allowEmpty', type: 'boolean'), parameter(name: 'excludes', type: 'java.lang.String'), parameter(name: 'includes', type: 'java.lang.String'), parameter(name: 'useDefaultExcludes', type: 'boolean'), ], doc: 'Stash some files to be used later in the build')
        method(name: 'step', type: 'Object', params: [delegate:'Map'], doc: 'General Build Step')
        method(name: 'svn', type: 'Object', params: [url:'java.lang.String'], doc: 'Subversion')
        method(name: 'svn', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'poll', type: 'boolean'), ], doc: 'Subversion')
        method(name: 'tee', type: 'Object', params: [file:java.lang.String, body:'Closure'], doc: 'Tee output to file')
        method(name: 'tm', type: 'Object', params: [stringWithMacro:'java.lang.String'], doc: 'Expand a string containing macros')
        method(name: 'touch', type: 'Object', params: [file:'java.lang.String'], doc: 'Create a file (if not already exist) in the workspace, and set the timestamp')
        method(name: 'touch', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'timestamp', type: 'java.lang.Long'), ], doc: 'Create a file (if not already exist) in the workspace, and set the timestamp')
        method(name: 'unstash', type: 'Object', params: [name:'java.lang.String'], doc: 'Restore files previously stashed')
        method(name: 'unzip', type: 'Object', params: [zipFile:'java.lang.String'], doc: 'Extract Zip file')
        method(name: 'unzip', type: 'Object', namedParams: [parameter(name: 'zipFile', type: 'java.lang.String'), parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'dir', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), parameter(name: 'quiet', type: 'boolean'), parameter(name: 'read', type: 'boolean'), parameter(name: 'test', type: 'boolean'), ], doc: 'Extract Zip file')
        method(name: 'updateIdP', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'metadata', type: 'java.lang.String'), ], doc: 'Update thirdparty Identity Provider')
        method(name: 'updateTrustPolicy', type: 'Object', namedParams: [parameter(name: 'roleName', type: 'java.lang.String'), parameter(name: 'policyFile', type: 'java.lang.String'), ], doc: 'Update trust policy of IAM roles')
        method(name: 'validateDeclarativePipeline', type: 'Object', params: [path:'java.lang.String'], doc: 'Validate a file containing a Declarative Pipeline')
        method(name: 'wrap', type: 'Object', params: [delegate:Map, body:'Closure'], doc: 'General Build Wrapper')
        method(name: 'writeFile', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Write file to workspace')
        method(name: 'writeJSON', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'json', type: 'Map'), parameter(name: 'pretty', type: 'int'), ], doc: 'Write JSON to a file in the workspace.')
        method(name: 'writeMavenPom', type: 'Object', params: [model:'Map'], doc: 'Write a maven project file.')
        method(name: 'writeMavenPom', type: 'Object', namedParams: [parameter(name: 'model', type: 'Map'), parameter(name: 'file', type: 'java.lang.String'), ], doc: 'Write a maven project file.')
        method(name: 'writeYaml', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'data', type: 'java.lang.Object'), parameter(name: 'charset', type: 'java.lang.String'), ], doc: 'Write a yaml from an object.')
        method(name: 'zip', type: 'Object', params: [zipFile:'java.lang.String'], doc: 'Create Zip file')
        method(name: 'zip', type: 'Object', namedParams: [parameter(name: 'zipFile', type: 'java.lang.String'), parameter(name: 'archive', type: 'boolean'), parameter(name: 'dir', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), ], doc: 'Create Zip file')
        method(name: 'ArtifactoryGradleBuild', type: 'Object', namedParams: [parameter(name: 'gradleBuild', type: 'Map'), parameter(name: 'rootDir', type: 'java.lang.String'), parameter(name: 'buildFile', type: 'java.lang.String'), parameter(name: 'tasks', type: 'java.lang.String'), parameter(name: 'switches', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), ], doc: 'run Artifactory gradle')
        method(name: 'ArtifactoryMavenBuild', type: 'Object', namedParams: [parameter(name: 'mavenBuild', type: 'Map'), parameter(name: 'pom', type: 'java.lang.String'), parameter(name: 'goals', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), ], doc: 'run Artifactory maven')
        method(name: 'ConanAddRemote', type: 'Object', namedParams: [parameter(name: 'serverUrl', type: 'java.lang.String'), parameter(name: 'serverName', type: 'java.lang.String'), parameter(name: 'conanHome', type: 'java.lang.String'), ], doc: 'Add new repo to Conan config')
        method(name: 'ConanAddUser', type: 'Object', namedParams: [parameter(name: 'server', type: 'Map'), parameter(name: 'serverName', type: 'java.lang.String'), parameter(name: 'conanHome', type: 'java.lang.String'), ], doc: 'Add new user to Conan config')
        method(name: 'InitConanClient', type: 'Object', params: [client:'Map'], doc: 'Advanced/Deprecated Create Conan Client')
        method(name: 'MavenDescriptorStep', type: 'Object', namedParams: [parameter(name: 'pomFile', type: 'java.lang.String'), parameter(name: 'version', type: 'java.lang.String'), parameter(name: 'versionPerModule', type: 'Map'), parameter(name: 'failOnSnapshot', type: 'boolean'), parameter(name: 'dryRun', type: 'boolean'), ], doc: 'Get Artifactory Maven descriptor')
        method(name: 'RunConanCommand', type: 'Object', namedParams: [parameter(name: 'command', type: 'java.lang.String'), parameter(name: 'conanHome', type: 'java.lang.String'), parameter(name: 'buildLogPath', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), ], doc: 'Run a Conan command')
        method(name: 'archive', type: 'Object', params: [includes:'java.lang.String'], doc: 'Advanced/Deprecated Archive artifacts')
        method(name: 'archive', type: 'Object', namedParams: [parameter(name: 'includes', type: 'java.lang.String'), parameter(name: 'excludes', type: 'java.lang.String'), ], doc: 'Archive artifacts')
        method(name: 'artifactoryDownload', type: 'Object', namedParams: [parameter(name: 'spec', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'server', type: 'Map'), ], doc: 'Download artifacts')
        method(name: 'artifactoryUpload', type: 'Object', namedParams: [parameter(name: 'spec', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'server', type: 'Map'), ], doc: 'Upload artifacts')
        method(name: 'deployArtifacts', type: 'Object', namedParams: [parameter(name: 'deployer', type: 'Map'), parameter(name: 'buildInfo', type: 'Map'), ], doc: 'Deploy artifacts')
        method(name: 'dockerFingerprintFrom', type: 'Object', namedParams: [parameter(name: 'dockerfile', type: 'java.lang.String'), parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'buildArgs', type: 'Map'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Record trace of a Docker image used in FROM')
        method(name: 'dockerPullStep', type: 'Object', namedParams: [parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'credentialsConfig', type: 'Map'), parameter(name: 'host', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), ], doc: 'Artifactory docker pull')
        method(name: 'dockerPushStep', type: 'Object', namedParams: [parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'credentialsConfig', type: 'Map'), parameter(name: 'host', type: 'java.lang.String'), parameter(name: 'targetRepo', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'properties', type: 'Map'), parameter(name: 'server', type: 'Map'), ], doc: 'Artifactory docker push')
        method(name: 'dockerPushWithProxyStep', type: 'Object', namedParams: [parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'credentialsConfig', type: 'Map'), parameter(name: 'host', type: 'java.lang.String'), parameter(name: 'targetRepo', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'properties', type: 'Map'), ], doc: 'Artifactory docker push')
        method(name: 'newArtifactoryServer', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'username', type: 'java.lang.String'), parameter(name: 'password', type: 'java.lang.String'), parameter(name: 'credentialsId', type: 'java.lang.String'), ], doc: 'Returns new Artifactory server')
        method(name: 'publishBuildInfo', type: 'Object', namedParams: [parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'server', type: 'Map'), ], doc: 'Publish build Info to Artifactory')
        method(name: 'unarchive', type: 'Object', params: [:], doc: 'Advanced/Deprecated Copy archived artifacts into the workspace')
        method(name: 'unarchive', type: 'Object', namedParams: [parameter(name: 'mapping', type: 'Map'), ], doc: 'Copy archived artifacts into the workspace')
        method(name: 'withDockerContainer', type: 'Object', params: [image:java.lang.String, body:'Closure'], doc: 'Advanced/Deprecated Run build steps inside a Docker container')
        method(name: 'withDockerContainer', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'args', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Run build steps inside a Docker container')
        method(name: 'withDockerRegistry', type: 'Object', params: [registry:Map, body:'Closure'], doc: 'Advanced/Deprecated Sets up Docker registry endpoint')
        method(name: 'withDockerServer', type: 'Object', params: [server:Map, body:'Closure'], doc: 'Advanced/Deprecated Sets up Docker server endpoint')
    }
}